GBM=function(S0,mu, sigma,T,N) {
# T=1  expiry time
# N=100  number of simulation points

h=T/N  # the timestep of the simulation
X=cumprod(c(S0, exp((mu-1/2*sigma^2)*h+sigma*sqrt(h)*rnorm(N,mean=0, sd=1) )))
return(X)
}
h=1/1000
t=seq(0,1,by=h) 
plot(t,GBM(S0=10,mu=0.1, sigma=0.4,1,N=1000), type="l", col="blue",xlab="t",ylab="GBM")

#Monte Carlo method
MC <- function(St , K,t , T , r , sigma ,M ){
ST <- St*exp((r-sigma^2/2)*(T-t)+sigma*sqrt(T-t)
*rnorm(M,mean=0,sd=1))
payoff <- pmax(ST-K,0)
price <-  exp(-r * (T - t))*mean(payoff)
return(price)}

MC(St=11 , K=10,t=0.5 , T=1 , r=0.07 , sigma=0.3 ,M=100000 )


options(digits=4) ## set the number of digits after decimal is 4
build_stock_tree = function(S) {
tree = matrix(0, nrow=3, ncol=3) ## create space for storing stock price at each node
u = 1.1  # up factor
d = 0.9  #down factor
for (i in 1:3) {
for (j in 1:i) {
tree[i,j] = S * u^(j-1) * d^((i-1)-(j-1))}}
return(tree)}

binomial_option = function(tree, q, delta_t, r, X) {
### tree: stock price binomial tree
###  q: risk-neutral probability of up move
### delta_t: the length of time of one period
### r: the risk-free interest rate compounded continuously
### X: the strike price
option_tree = matrix(0, nrow=3, ncol=3)
option_tree[nrow(option_tree),] = pmax(tree[nrow(tree),] - X, 0)
for (i in (nrow(tree)-1):1) {
for(j in 1:i) {
option_tree[i, j] = ((1-q)*option_tree[i+1,j] + q*option_tree[i+1,j+1])/exp(r*delta_t)}}
return(option_tree)}

European_call_binomial=function(u,d, T, r, X,delta_t,N,S0){
p = (exp(r * delta_t) - d)/(u - d) ### probability of up move
Df = exp(-r * T) ### discounting factor
Ce=0;
for (i in 1:(N+1)){Ce = Ce+choose(N,i-1)*p^{i-1}*(1-p)^{N+1-i}*max(S0*u^{i-1}*d^{N-i+1}-X,0)}
return(Df*Ce)}
#European_call_binomial(u=1.1,d=0.9, T=0.5,r=0.12,X=21,delta_t=0.25,N=2,S0=20)
